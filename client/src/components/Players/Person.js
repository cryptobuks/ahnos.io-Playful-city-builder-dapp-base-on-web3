/* eslint-disable react/prop-types */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useGraph } from '@react-three/fiber'

const Model = ({ action = 'Idle', ...props }) => {
  const { scene, animations } = useGLTF('/models/person.glb')
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { ref, actions, names } = useAnimations(animations)

  useEffect(() => {
    actions[action]?.reset().fadeIn(0.3).play()
    return () => void actions[action]?.fadeOut(0.3)
  }, [actions, names, action])

  return (
    <>
      <group ref={ref} {...props} dispose={null}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh
            geometry={nodes.Cylinder001.geometry}
            material={materials['Material.005']}
            skeleton={nodes.Cylinder001.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Cylinder001_1.geometry}
            material={materials['Material.004']}
            skeleton={nodes.Cylinder001_1.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Cylinder001_2.geometry}
            material={materials['Material.003']}
            skeleton={nodes.Cylinder001_2.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Cylinder001_3.geometry}
            material={materials['Material.006']}
            skeleton={nodes.Cylinder001_3.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Cylinder001_4.geometry}
            material={materials['Material.007']}
            skeleton={nodes.Cylinder001_4.skeleton}
          />
        </group>
      </group>
    </>
  )
}

useGLTF.preload('/models/person.glb')

export default Model
